// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: files.proto

package files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*File, error)
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	Grep(ctx context.Context, in *GrepRequest, opts ...grpc.CallOption) (*GrepResponse, error)
	CreateFileWithStream(ctx context.Context, opts ...grpc.CallOption) (FileService_CreateFileWithStreamClient, error)
	GetFileWithStream(ctx context.Context, in *GetFileWithStreamRequest, opts ...grpc.CallOption) (FileService_GetFileWithStreamClient, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/files.FileService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/files.FileService/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, "/files.FileService/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Grep(ctx context.Context, in *GrepRequest, opts ...grpc.CallOption) (*GrepResponse, error) {
	out := new(GrepResponse)
	err := c.cc.Invoke(ctx, "/files.FileService/Grep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CreateFileWithStream(ctx context.Context, opts ...grpc.CallOption) (FileService_CreateFileWithStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], "/files.FileService/CreateFileWithStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceCreateFileWithStreamClient{stream}
	return x, nil
}

type FileService_CreateFileWithStreamClient interface {
	Send(*CreateFileWithStreamRequest) error
	CloseAndRecv() (*CreateFileWithStreamResponse, error)
	grpc.ClientStream
}

type fileServiceCreateFileWithStreamClient struct {
	grpc.ClientStream
}

func (x *fileServiceCreateFileWithStreamClient) Send(m *CreateFileWithStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceCreateFileWithStreamClient) CloseAndRecv() (*CreateFileWithStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateFileWithStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) GetFileWithStream(ctx context.Context, in *GetFileWithStreamRequest, opts ...grpc.CallOption) (FileService_GetFileWithStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], "/files.FileService/GetFileWithStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceGetFileWithStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_GetFileWithStreamClient interface {
	Recv() (*GetFileWithStreamResponse, error)
	grpc.ClientStream
}

type fileServiceGetFileWithStreamClient struct {
	grpc.ClientStream
}

func (x *fileServiceGetFileWithStreamClient) Recv() (*GetFileWithStreamResponse, error) {
	m := new(GetFileWithStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetFile(context.Context, *GetFileRequest) (*File, error)
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	Grep(context.Context, *GrepRequest) (*GrepResponse, error)
	CreateFileWithStream(FileService_CreateFileWithStreamServer) error
	GetFileWithStream(*GetFileWithStreamRequest, FileService_GetFileWithStreamServer) error
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFileServiceServer) GetFile(context.Context, *GetFileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileServiceServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFileServiceServer) Grep(context.Context, *GrepRequest) (*GrepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grep not implemented")
}
func (UnimplementedFileServiceServer) CreateFileWithStream(FileService_CreateFileWithStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateFileWithStream not implemented")
}
func (UnimplementedFileServiceServer) GetFileWithStream(*GetFileWithStreamRequest, FileService_GetFileWithStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFileWithStream not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FileService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FileService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FileService/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Grep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Grep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FileService/Grep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Grep(ctx, req.(*GrepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CreateFileWithStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).CreateFileWithStream(&fileServiceCreateFileWithStreamServer{stream})
}

type FileService_CreateFileWithStreamServer interface {
	SendAndClose(*CreateFileWithStreamResponse) error
	Recv() (*CreateFileWithStreamRequest, error)
	grpc.ServerStream
}

type fileServiceCreateFileWithStreamServer struct {
	grpc.ServerStream
}

func (x *fileServiceCreateFileWithStreamServer) SendAndClose(m *CreateFileWithStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceCreateFileWithStreamServer) Recv() (*CreateFileWithStreamRequest, error) {
	m := new(CreateFileWithStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_GetFileWithStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileWithStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).GetFileWithStream(m, &fileServiceGetFileWithStreamServer{stream})
}

type FileService_GetFileWithStreamServer interface {
	Send(*GetFileWithStreamResponse) error
	grpc.ServerStream
}

type fileServiceGetFileWithStreamServer struct {
	grpc.ServerStream
}

func (x *fileServiceGetFileWithStreamServer) Send(m *GetFileWithStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "files.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _FileService_Ping_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _FileService_GetFile_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _FileService_CreateFile_Handler,
		},
		{
			MethodName: "Grep",
			Handler:    _FileService_Grep_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateFileWithStream",
			Handler:       _FileService_CreateFileWithStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFileWithStream",
			Handler:       _FileService_GetFileWithStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "files.proto",
}
